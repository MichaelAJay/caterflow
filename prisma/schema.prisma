// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELS (A-Z)
model CateringCompany {
  id                String                    @id @default(uuid())
  name              String
  isActive          Boolean                   @default(false) @map("is_active")
  ownerId           String                    @unique
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  users             User[]                    @relation("company_users")
  owner             User                      @relation("owner", fields: [ownerId], references: [id])
  integrations      CompanyIntegration[]
  integrationAssets CompanyIntegrationAsset[]
  roles             Role[]
  userRoles         UserRole[]

  @@map("catering_companies")
}

model CompanyIntegration {
  id           String           @id @default(uuid())
  companyId    String           @map("company_id")
  templateId   String           @map("template_id")
  event        IntegrationEvent
  isConfigured Boolean          @default(false) @map("is_configured")
  isTested     Boolean          @default(false) @map("is_tested")
  isActive     Boolean          @default(false) @map("is_active")

  template IntegrationTemplate       @relation(fields: [templateId], references: [id])
  company  CateringCompany           @relation(fields: [companyId], references: [id])
  assets   CompanyIntegrationAsset[]

  @@unique([companyId, event], name: "companyEventUnique", map: "company_event_unique")
  @@index([companyId])
  @@map("company_integrations")
}

model CompanyIntegrationAsset {
  id                       String               @id @default(uuid())
  companyId                String               @map("company_id")
  integrationRequirementId String               @map("integration_requirement_id")
  type                     IntegrationAssetType
  system                   ExternalSystem?

  company                CateringCompany        @relation(fields: [companyId], references: [id])
  integrationRequirement IntegrationRequirement @relation(fields: [integrationRequirementId], references: [id])
  integrations           CompanyIntegration[]

  @@unique([companyId, integrationRequirementId], name: "assetRequirementUnique", map: "asset_requirement_unique")
  @@index([companyId])
  @@map("company_integration_assets")
}

model IntegrationRequirement {
  id        String                @id @default(uuid())
  type      IntegrationAssetType
  system    ExternalSystem?
  data      Json
  templates IntegrationTemplate[]

  assets CompanyIntegrationAsset[]

  @@map("integration_template_requirements")
}

model IntegrationTemplate {
  id           String                   @id @default(uuid())
  event        IntegrationEvent         @unique
  srcSystem    ExternalSystem           @map("src_system")
  srcEntity    ExternalEntity           @map("src_entity")
  targetSystem ExternalSystem           @map("target_system")
  targetEntity ExternalEntity           @map("target_entity")
  requirements IntegrationRequirement[]
  integrations CompanyIntegration[]

  @@map("integration_templates")
}

model Permission {
  id   Int            @id @default(autoincrement())
  name PermissionName @unique

  roles Role[]
}

model Role {
  id        String           @id @default(uuid())
  name      String
  companyId String?
  company   CateringCompany? @relation(fields: [companyId], references: [id])
  updaterId String?
  updatedAt DateTime         @updatedAt @map("updated_at")

  permissions Permission[]
  userRoles   UserRole[]
  updater     User?        @relation(fields: [updaterId], references: [id])

  @@index([companyId])
}

model User {
  id             String           @id @default(uuid())
  extAuthUID     String           @unique @map("ext_auth_uid")
  companyId      String?          @map("company_id")
  emailEncrypted String           @map("email_encrypted")
  emailHashed    String           @unique @map("email_hashed")
  nameEncrypted  String           @map("name_encrypted")
  emailVerified  Boolean          @default(false) @map("email_verified")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  company        CateringCompany? @relation(name: "company_users", fields: [companyId], references: [id], onDelete: Cascade)
  ownedCompany   CateringCompany? @relation("owner")
  userRoles      UserRole[]       @relation("user")
  addedUserRoles UserRole[]       @relation("adder")
  updatedRoles   Role[]

  @@index([extAuthUID])
  @@index([companyId])
  @@map("users")
}

model UserRole {
  id        String @id @default(uuid())
  roleId    String
  userId    String
  companyId String
  adderId   String

  role    Role            @relation(fields: [roleId], references: [id])
  user    User            @relation("user", fields: [userId], references: [id])
  company CateringCompany @relation(fields: [companyId], references: [id])
  addedBy User            @relation("adder", fields: [adderId], references: [id])
}

// ENUMS (A-Z)
enum ExternalEntity {
  Order
  Lead
}

enum ExternalSystem {
  ezCater
  Nutshell
}

enum IntegrationAssetType {
  apiConfiguration
  dataMap
}

enum IntegrationEvent {
  ezCaterOrderReceived
}

enum PermissionName {
  CreateRole
  AddPermissionToRole
  RemovePermissionFromRole
  DeleteRole
  AssignRole
  UnassignRole
  GetIntegrations
  CreateIntegration
  UpdateIntegration
  CancelIntegration
  DeleteIntegration
  GetIntegrationAssets
  AddIntegrationAsset
  UpdateIntegrationAsset
  DeleteIntegrationAsset
}
